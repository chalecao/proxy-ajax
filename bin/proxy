#!/usr/bin/env node
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var opts = require('opts');
var path = require('path');
var pjson = _interopDefault(require('../package.json'));
var httpProxy = _interopDefault(require('http-proxy'));
var fs = _interopDefault(require('fs'));
var colors = _interopDefault(require('colors'));

var http = require('http'); 
var net = require('net'); 
var url = require('url'); 

var request =  function request(cReq, cRes, rqurl) {
    var u = url.parse(rqurl || Req.url);
    var options = {
        hostname: u.hostname,
        port: u.port || 80,
        path: u.path,
        method: cReq.method,
        headers: rqurl?"":cReq.headers
    };

    var pReq = http.request(options, function (pRes) {
        cRes.writeHead(pRes.statusCode, pRes.headers);
        pRes.pipe(cRes);
    }).on('error', function (e) {
        console.log(e);
        cRes.end();
    });
    cReq.pipe(pReq);

};

var connect = function(cReq, cSock) {
    var u = url.parse('http://' + cReq.url);
    var pSock = net.connect(u.port, u.hostname, function () {
        cSock.write('HTTP/1.1 200 Connection Established\r\n\r\n');
        pSock.pipe(cSock);
    }).on('error', function (e) {
        cSock.end();
    });
    cSock.pipe(pSock);

};

var https = require('https');
var fs$1 = require('fs');
var path$1 = require('path');
var httpProxy$1 = require('http-proxy');
var PORT = 443;

var proxyServer = httpProxy$1.createProxyServer();
proxyServer.on('proxyReq', function(proxyReq, req, res, options) {
    proxyReq.setHeader('X-Special-Proxy-Header', 'tap');
    proxyReq.setHeader('X-WH-REQUEST-URI', req._originUrl);
  });

proxyServer.on('proxyReq', function (proxyReq, req) {
    req._proxyReq = proxyReq;
});

proxyServer.on('error', function (err, req, res) {
    if (req.socket.destroyed && err.code === 'ECONNRESET') {
        req._proxyReq.abort();
    }
});

var httpsProxy = function (proxyConfig) {
    var SECURE_OPTIONS = {
        // ca: [
        //     fs.readFileSync(resolve('./cert/server.csr'))
        // ],
        cert: fs$1.readFileSync(path.resolve(proxyConfig.cert || path.join(__dirname,'../localhost-cert/server.crt')), 'utf-8'),
        key: fs$1.readFileSync(path.resolve(proxyConfig.key || path.join(__dirname,'../localhost-cert/server.key')), 'utf-8'),
        requestCert: false,
        rejectUnauthorized: false
    };
    https.createServer(SECURE_OPTIONS, function (req, res) {
        // 在这里可以自定义你的路由分发
        var host = req.headers.host,
            rurl = "https://" + req.headers.host + req.url,
            ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
        console.log('client ip: '.blue + ip + ' , host: '.green + host);
        console.log("request URL: ".cyan + rurl);
        var p = proxyConfig.proxy.reverse().find(function (p) {
            var rule = new RegExp(p.path);
            return p.path && rule.exec(rurl);
        });
        if (p) {
            console.log("find rule for above url!");
            if (p.data) {
                //jsonp
                var callbackName = new RegExp("callback=(.*)&", "g").exec(req.url);
                if (callbackName && callbackName[1]) {
                    console.log("jsonp match given data! ".red);
                    res.writeHead(200, {
                        'Content-Type': 'application/json'
                    });
                    res.end(callbackName[1] + "(" + p.data + ")");
                } else {
                    console.log("ajax match given data! ".red);
                    res.writeHead(200, {
                        'Content-Type': 'application/json'
                    });
                    res.end(p.data);

                }

            } else if (p.routeTo) {
                console.log("proxy to: ".red + proxyConfig[p.routeTo]);
                proxyServer.web(req, res, {
                    target: proxyConfig[p.routeTo],
                    secure: false
                });
            } else {
                request(req, res);
            }
        } else {
            request(req, res);
        }
    }).listen(proxyConfig.httpsPort || PORT, function () { return console.log("https server run at " + proxyConfig.httpsPort || PORT); });
};

// import url from "url";
var version = pjson.version;

opts.parse([{
    short: "v",
    long: "version",
    description: "Show the version",
    required: false,
    callback: function () {
        console.log(version);
        return process.exit(1);
    }
}, {
    short: "p",
    long: "port",
    description: "Specify the port",
    value: true,
    required: false
}].reverse(), true);

var port = opts.get('port');

var configFilePath = path.resolve(process.argv[2] || "./.proxy-ajax.config.js");
if (process.argv[2] == "-p") {
    configFilePath = path.resolve("./.proxy-ajax.config.js");
}
var server;
// 管理连接
var sockets = [];
// 新建一个代理 Proxy Server 对象
var proxy = httpProxy.createProxyServer({});
proxy.on('proxyReq', function(proxyReq, req, res, options) {
    proxyReq.setHeader('X-Special-Proxy-Header', 'tap');
    proxyReq.setHeader('X-WH-REQUEST-URI', req._originUrl);
  });
// 捕获异常  
proxy.on('error', function (err, req, res) {
    res.writeHead(500, {
        'Content-Type': 'text/plain'
    });
    res.end('Something went wrong. And we are reporting a custom error message.');
});
//根据路径获取数据
function getData(configFilePath) {
    return new Promise(function (resolve$$1, reject) {
        //如果是数据文件内容，直接返回
        if (configFilePath.match("{")) {
            resolve$$1(configFilePath);
        }
        else if(configFilePath.match(".js")) {
            //如果是数据文件，需要加载
            console.log("import config file from " + configFilePath);
            delete require.cache[require.resolve(configFilePath)];
            resolve$$1(require(configFilePath));

        } else {
            //不能require，需要使用文件读取
            console.log("read config file from " + configFilePath);
            fs.stat(configFilePath, function (err, stats) {
                if (err) {
                    console.log(".proxy-ajax.config file not found in dir ./");
                    reject("error");
                    return;
                }
                if (stats.isFile()) {
                    fs.readFile(configFilePath, function (err, data) {
                        if (err) {
                            console.log(".proxy-ajax.config read error");
                            reject("error");
                            return;
                        }
                        resolve$$1(data);
                    });
                }
            });
        }
    });
}
//根据配置初始化代理
getData(configFilePath).then(function (value) {

    var proxyConfig = (typeof value == "object") ? value : JSON.parse(value);
    proxyConfig = proxyConfig.proxyConfig || proxyConfig;
    var _proxy = proxyConfig.proxy.reverse();
    server = require('http').createServer(function (req, res) {

        // 在这里可以自定义你的路由分发
        var host = req.headers.host,
            rurl = req.url,
            ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
        console.log("");
        console.log('client ip: '.blue + ip + ' , host: '.green + host);
        console.log("request URL: ".cyan + rurl );
        
        var p = _proxy.find(function (p) {
            var rule = new RegExp(p.path);
            return rule.exec(rurl) && p.path;
        });
        if (p) {

            console.log("find rule for above url!".yellow);
            if (p.data) {
                getData(path.resolve(p.data)).then(function (value) {
                    var callbackName = new RegExp("callback=(.*)&", "g").exec(req.url);
                    if (callbackName && callbackName[1]) {
                        console.log("jsonp match given data! ".red);
                        res.writeHead(200, {
                            'Content-Type': 'application/json'
                        });
                        res.end(callbackName[1] + "(" + JSON.stringify(value) + ")");
                    } else {
                        console.log("ajax match given data! ".red);
                        res.writeHead(200, {
                            'Content-Type': 'application/json'
                        });
                        res.end(JSON.stringify(value));

                    }
                });

            } else if (p.routeTo) {
                if(p.routeTo.match("//")){
                    var targetUrl = p.routeTo;
                    var callbackName = new RegExp("callback=(.*)&", "g").exec(req.url);
                    if (callbackName && callbackName[1]) {
                        console.log("jsonp match given data! ".red);
                        targetUrl += "?callback="+callbackName[1];
                    }
                    console.log("proxy to: ".red + targetUrl);
                    // 设置req
                    request(req, res, targetUrl);
                }else{
                    console.log("proxy to: ".red + proxyConfig[p.routeTo]);
                    // 设置req
                    req._originUrl = req.url;
                    proxy.web(req, res, {
                        target: proxyConfig[p.routeTo]
                    });
                }
            } else {
                request(req, res);
            }
        } else {
            request(req, res);
        }

    });
    server.listen((port || proxyConfig.port));
    server.on("connection", function (socket) {
        sockets.push(socket);
        socket.once("close", function () {
            sockets.splice(sockets.indexOf(socket), 1);
        });
    });
    server.on('connect', function (cReq, cSock) {
        console.log("");
        console.log("connect ".yellow + cReq.url);
        connect(cReq, cSock);
    });
    if (proxyConfig.httpsPort) {
        httpsProxy(proxyConfig);
    }
    console.log("proxy ajax server start succesfully on port " + (port || proxyConfig.port) + " !");

},
    function (error) {
        console.log(error);
    });

//关闭之前，我们需要手动清理连接池中得socket对象
function closeServer() {
    sockets.forEach(function (socket) {
        socket.destroy();
    });
    server.close(function () {
        console.log("close server, done!");
        process.exit(1);
    });
}
process.on('exit', function () {
    console.log("welcome back, have a nice day!");
});
process.on('SIGINT', function () {
    closeServer();
    process.exit(1);
});
